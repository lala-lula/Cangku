/**链式前向星作为存储图的结构，实现广度优先遍历（BFS）时，需借助队列，先将起始点放入队列中，然后遍历的孩子节点，（若该点未被输出）并将孩子节点入队，
   然后取出队列中的第一个元素，遍历它的孩子节点，（若该点未被输出）并入队，直到队列为空表示广度优先搜索结束。
   
   链式前向星的深度优先遍历（DFS）可借助栈来实现非递归算法，也是先将起始点放入栈中，然后出栈输出 并遍历该点的孩子节点，（若该点未被输出）将他们入栈，
   然后取出栈顶元素（即起始节点的孩子节点）并输出，遍历其孩子节点，放入栈中，此时，栈顶元素为起始点孩子的孩子，以此类推，直到栈为
   空时，遍历结束。
   
   dijkstra算法采用的是贪心算法的思想，用dis[i]数组来表示起点到各顶点的最短距离，用T{}来表示已经确定的顶点，首先用起始点的出度初始化dis[]数组，并将起
   始点放入集合T中，然后选出（i没在输出顶点集合中的）最小的dis[i]，此时起始点到i的最短距离确定（贪心），将i放入集合T{}中，并根据i的出度，松弛dis数组（
   若dis[i]+i->i的孩子的j的距离，更新dis[j]的值）然后选出除去集合T中点的最小dis，重复上述操作，直到所有所有点都在集合T中，结束操作。（此算法不能解决权
   值为负数的情况）O(n^2)
   
   struct Dis() {
        visit = false;
        value = 0;
        path = "";
    }dis[i];
    
   SPFA可以求求权值为负的最短路径问题，但是不能求负环问题（成环的各个边的权值和为负数），首先用dis[i]数组来表示起点到各点的最短距离，用队列queue来存储被
   松弛的顶点，首先初始化dis和queue(dis[起点] = 0， dis[其他] = ∞,起点进队列)，根据起点的出度，松弛dis数组，（若顶点不在队列中）并将松弛的数组对应的顶点
   入队列，然后出队列，继续松弛，重复上述操作，直到队列为空。O(VE)
   
   Floyd算法运用动态规划的思想（Dk[i][j]＝min{ Dk-1[i][j], Dk-1[i][k] +Dk-1[k][j]}），可以求出每两点之间的最短距离，设有N个顶点，用邻接矩阵D[N][N]来存储
   边的信息，把P[N][N]初始化为-1；然后对每个顶点k,若D[i][k]+D[k][j]<D[i][j]则更改D[i][j]为D[i][k]+D[k][j]，更改P[i][j]为k，直到遍历完所有k。三重循环O(n^3)
   此时D[i][j]表示的是i到j的最短距离。最短路径的确定，可以根据P[i][j],P[i][p[i][j]],P[p[i][j]][j]如此递归来求出。
   可以求求权值为负的最短路径问题，但是不能求负环问题（成环的各个边的权值和为负数）
**/

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define max(a,b) a>b?1:0
#define INT_MAX 2147483647
#define MAX_ 200001i

int m,n;
int head[MAX_];
int M;
int minLenth[MAX_];

struct edge
{
    int to;
    int before;
    int weight;
}Edge[MAX_];

typedef struct qnode
{
    int data;
    struct qnode *next;
}QNode,*QueuePtr;

typedef struct queue
{
    QueuePtr front;
    QueuePtr rear;
}Queue;

void initLenth(int minLenth[])
{
    int i;
    for(i = 1; i<=n; i++)
    {
        if(i==1)
        minLenth[i] = 0;
        else
        minLenth[i] = INT_MAX;
    }
}

void add(int from, int to, int weight)
{
    Edge[M].to = to;
    Edge[M].weight = weight;
    Edge[M].before = head[from];
    head[from] = M++;
}

int isEmpty(Queue Q)
{
    if(Q.rear == Q.front)
    return 0;
    else 
    return 1;
}

void init(Queue &Q)
{
    QueuePtr q;
    q = (QueuePtr)malloc(sizeof(QNode));
    if(!q)
    exit(-1);
    Q.front = q;
    Q.rear = Q.front;
    Q.rear->next = NULL;
}

void EnQueue(Queue &Q, int e)
{
    QueuePtr q;
    q = (QueuePtr)malloc(sizeof(QNode));
    if(!q)
    exit(-1);
    q->data = e;
    q->next = NULL;
    Q.rear->next = q;
    Q.rear = q;
}

void DeQueue(Queue &Q)
{
    if(!isEmpty(Q))
    return ;
    else
    {
        QueuePtr q;
        q = Q.front->next;
        Q.front->next = q->next;
        if(q==Q.rear)
        Q.front = Q.rear;
    } 
}

int main ( )
{
    int i;
    memset(head,-1,sizeof(head));
    scanf("%d%d",&n,&m);
    for(i = 0; i<m; i++)
    {
        int from,to ,weight;
        scanf("%d%d%d",&from,&to,&weight);
        add(from,to,weight);
    }
    Queue Q;
    init(Q);
    initLenth(minLenth);
    EnQueue(Q,1);
    while(isEmpty(Q))
    {
        for(i = head[Q.front->next->data]; i!=-1; i = Edge[i].before)
        {
            if(minLenth[Edge[i].to]>(minLenth[Q.front->next->data] + Edge[i].weight))
            {
                minLenth[Edge[i].to] = minLenth[Q.front->next->data] + Edge[i].weight;
                EnQueue(Q,Edge[i].to);
            }
        }
        DeQueue(Q);
     }
     for(i = 2; i<=n; i++)
     {
         printf("%d\n",minLenth[i]);
     }
     return 0;
}
